Prompt: 1 / 1Add a console log statement to log me.game.viewport.pos
Answer: 1 /
1Sure, you can add a console.log statement to log the me.game.viewport.pos
property to the console. Here's an updated version of the getPlayScreen function
with the console.log statement added:javascriptCopy codefunction
getPlayScreen(images) {
  const PlayerEntity = getPlayerEntity();

  class
PlayScreen extends me.Stage {
    constructor() {
      super();
this.backgroundColor = '#202020';

      drawPlatform(me.game.world, 0, 500,
800, 100, images.platform);
      const player = new PlayerEntity(0, 0, {
image: images.player,
        width: 64,
        height: 64,
      });
player.renderable.scale(2, 2);
      player.body.gravityScale = 0;
player.body.collisionType = me.collision.types.PLAYER_OBJECT;
player.body.vel.x = 3;
      player.body.vel.y = 3;
me.game.world.addChild(player);

      // set the player as a property of the
PlayScreen instance
      this.player = player;

      // log the viewport
position to the console
      console.log(me.game.viewport.pos);
    }
onResetEvent() {
      me.input.bindKey(me.input.KEY.LEFT, "left");
me.input.bindKey(me.input.KEY.RIGHT, "right");
me.input.bindKey(me.input.KEY.UP, "jump", true);
me.input.bindKey(me.input.KEY.SPACE, "shoot");
me.game.viewport.setDeadzone(30, 30);
    }
  }
  return PlayScreen;
}
In this
updated version of the getPlayScreen function, a console.log statement has been
added to log the me.game.viewport.pos property to the console. This will help
you to see if the viewport position is correct or not.