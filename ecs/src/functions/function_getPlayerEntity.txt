Prompt: 1 / 1
  I get the following error:
  ReferenceError: me is not defined
at getPlayerEntity (about:srcdoc:45:30)
    at about:srcdoc:13:26
    at
EventEmitter.emit
(https://cdn.jsdelivr.net/npm/melonjs@latest/dist/melonjs.module.js:9454:34)
at emit
(https://cdn.jsdelivr.net/npm/melonjs@latest/dist/melonjs.module.js:10074:25)
at _domReady
(https://cdn.jsdelivr.net/npm/melonjs@latest/dist/melonjs.module.js:14494:9)
Please respond with up to 3 corrected functions.
  All classes must be wrapped
in functions.
  All functions must be named and short.
  No global variables.
Answer: 1 / 1Here's a corrected version of the getPlayerEntity function that
should fix the ReferenceError: me is not defined error:kotlinCopy codefunction
getPlayerEntity() {
  class PlayerEntity extends me.Entity {
    constructor(x,
y, settings) {
      // call the super constructor
      super(x, y,
settings);

      // set the default horizontal & vertical speed (accel vector)
this.body.setVelocity(3, 3);
      this.body.setMaxVelocity(6, 6);
// set the display to follow our position on both axis
me.game.viewport.follow(this.pos, me.game.viewport.AXIS.BOTH);

      // ensure
the player is updated even when outside of the viewport
      this.alwaysUpdate
= true;

      // add a green rectangle to represent the player
      const gfx
= new me.GraphicsRenderer();
      gfx.createRenderable(0, 0, this.width,
this.height);
      gfx.fillStyle = "#00FF00";
      gfx.fillRect(0, 0,
this.width, this.height);
      this.renderable = gfx;
      
      // bind the
keys to movement
      setupKeyboardInput.call(this);
    }

    update(dt) {
// apply physics to the body (this moves the entity)
this.body.update(dt);

      // handle collisions against other shapes
me.collision.check(this);

      // update the animation if necessary
      if
(this.body.vel.x !== 0 || this.body.vel.y !== 0) {
        // update object
animation
        this._super(me.Entity, "update", [dt]);
        return true;
}

      // else inform the engine we did not perform
      // any update
(e.g. position, animation)
      return false;
    }
  }

  return
PlayerEntity;
}