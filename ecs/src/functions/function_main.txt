Prompt: 1 / 1There you go, don't use .default when calling example
either
Answer: 1 / 1You're right, sorry about that. Here's an updated version of
the main() function without using .default when calling the example()
function:javascriptCopy codeasync function main() {
  const melonjs = await
import("https://esm.run/melonjs@latest/dist/melonjs.module.js");
console.log("melonjs loaded:", melonjs);
  example(melonjs);
}

function
example(me) {
  me.boot();

  me.device.onReady(function () {
    // initialize
the display canvas once the device/browser is ready
    if (!me.video.init(1218,
562, {parent : "screen", scale : "auto"})) {
      alert("Your browser does not
support HTML5 canvas.");
      return;
    }

    // add a gray background to
the default Stage
    me.game.world.addChild(new me.ColorLayer("background",
"#202020"));

    // add a font text display object
me.game.world.addChild(new me.Text(609, 281, {
      font: "Arial",
      size:
160,
      fillStyle: "#FFFFFF",
      textBaseline : "middle",
      textAlign
: "center",
      text : "Hello World !"
    }));
  });
}

main();
In this
example, we pass the entire melonjs object to the example() function, and remove
the .default property from the me object parameter in the example() function.
This should work correctly as long as the melonjs module exports a single
default object.